{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","turn","gameEnded","board","Array","fill","totalMoves","winner","undefined","event","target","dataset","square","innerText","setState","result","checkWinner","winnerLine","moves","i","length","_this2","react_default","a","createElement","id","onClick","e","clicked","className","data-square","Component","App","components_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAmGeA,cAhGX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACRC,KAAM,IACNC,WAAW,EACXC,MAAOC,MAAM,GAAGC,KAAK,IACrBC,WAAW,EACXC,YAAOC,GARGf,uEAYXgB,GAC+C,KAAhDb,KAAKI,MAAMG,MAAMM,EAAMC,OAAOC,QAAQC,UACzChB,KAAKI,MAAMG,MAAMM,EAAMC,OAAOC,QAAQC,QAAQhB,KAAKI,MAAMC,KACzDQ,EAAMC,OAAOG,UAAUjB,KAAKI,MAAMC,KAClCL,KAAKkB,SAAS,CACVb,KAAyB,MAApBL,KAAKI,MAAMC,KAAa,IAAI,IACjCE,MAAMP,KAAKI,MAAMG,MACjBG,WAAWV,KAAKI,MAAMM,gBAG1B,IAAIS,EAAOnB,KAAKoB,cACH,MAAVD,EAECnB,KAAKkB,SAAS,CACVZ,WAAU,EACVK,OAAQ,IACRU,WAAW,mBAGF,MAATF,EAEJnB,KAAKkB,SAAS,CACVZ,WAAU,EACVK,OAAQ,IACRU,WAAW,mBAGH,QAARF,GAEJnB,KAAKkB,SAAS,CACVZ,WAAU,EACVK,OAAQ,OACRU,WAAW,wDAQnB,IAFA,IAAIC,EAAM,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,IACpEf,EAAMP,KAAKI,MAAMG,MACbgB,EAAE,EAAEA,EAAED,EAAME,OAAOD,IAEvB,GAAGhB,EAAMe,EAAMC,GAAG,MAAMhB,EAAMe,EAAMC,GAAG,KAAOhB,EAAMe,EAAMC,GAAG,MAAMhB,EAAMe,EAAMC,GAAG,IAClF,OAAOhB,EAAMe,EAAMC,GAAG,IAG1B,GAA0B,GAAvBvB,KAAKI,MAAMM,WAEV,MAAO,wCAeN,IAAAe,EAAAzB,KACL,OACI0B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQC,QAAS,SAACC,GAAD,OAAKN,EAAKO,QAAQD,KACvCL,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAASC,cAAY,MACpCR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAASC,cAAY,MACpCR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAASC,cAAY,MACpCR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAASC,cAAY,MACpCR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAASC,cAAY,MACpCR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAASC,cAAY,MACpCR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAASC,cAAY,MACpCR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAASC,cAAY,MACpCR,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAASC,cAAY,MACpCR,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,YAGdF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAU7B,KAAKI,MAAMiB,oBA5FpBc,aCgBNC,MAXf,WACE,OACEV,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAR,eACAH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACVF,EAAAC,EAAAC,cAACS,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.25ee3f7a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './mystyle.css'\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             turn: 'X',\r\n             gameEnded: false,\r\n             board :Array(9).fill(''),\r\n             totalMoves:0,\r\n             winner:undefined\r\n        }\r\n    }\r\n    \r\n    clicked(event){\r\n        if(this.state.board[event.target.dataset.square]===''){\r\n        this.state.board[event.target.dataset.square]=this.state.turn\r\n        event.target.innerText=this.state.turn;\r\n        this.setState({\r\n            turn:this.state.turn === 'X'?'0':'X',\r\n            board:this.state.board,\r\n            totalMoves:this.state.totalMoves++\r\n        })\r\n    }\r\n        var result=this.checkWinner();\r\n        if(result=== 'X')\r\n        {\r\n            this.setState({\r\n                gameEnded:true,\r\n                winner: 'X',\r\n                winnerLine:'Match won by X'\r\n            })\r\n        }\r\n        else if(result==='0')\r\n        {\r\n            this.setState({\r\n                gameEnded:true,\r\n                winner: '0',\r\n                winnerLine:'Match won by 0'\r\n            })\r\n        }\r\n        else if(result=='draw')\r\n        {\r\n            this.setState({\r\n                gameEnded:true,\r\n                winner: 'draw',\r\n                winnerLine:'Match is Draw'\r\n            })\r\n        }\r\n    }\r\n     \r\n    checkWinner(){\r\n        var moves=[[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],[0,1,2],[3,4,5],[6,7,8]];\r\n        var board=this.state.board\r\n        for(let i=0;i<moves.length;i++)\r\n        {\r\n            if(board[moves[i][0]]===board[moves[i][1]] && board[moves[i][1]]===board[moves[i][2]])\r\n            return board[moves[i][0]];\r\n        }\r\n\r\n        if(this.state.totalMoves==9)\r\n        {\r\n            return 'draw';\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <div id='board' onClick={(e)=>this.clicked(e)}>                \r\n                <div className='square' data-square='0'></div>\r\n                <div className='square' data-square='1'></div>\r\n                <div className='square' data-square='2'></div>\r\n                <div className='square' data-square='3'></div>\r\n                <div className='square' data-square='4'></div>\r\n                <div className='square' data-square='5'></div>\r\n                <div className='square' data-square='6'></div>\r\n                <div className='square' data-square='7'></div>\r\n                <div className='square' data-square='8'></div>\r\n                <br/><br/><br/>\r\n                \r\n            </div>\r\n            <div id='status'>{this.state.winnerLine}</div></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\nimport './components/mystyle.css'\nimport Header from './components/Header'\n\n\n\n\nfunction App() {\n  return (\n    <div id='game'>\n      <div id=\"header\">TIC TAC TOE</div>\n      <br/><br/><br/>\n      <Header/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}